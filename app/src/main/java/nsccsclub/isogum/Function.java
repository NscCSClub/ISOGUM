package nsccsclub.isogum;

import android.util.Log;

/**
 * A basic function object for the ISO GUM calculator. Contains methods
 * relating to calculating uncertainty.
 * Created by csconway on 4/21/2016.
 */
public class Function {
    /**
     * The unique name of the function, must be tested in SQLLite data base for uniqueness.
     */
    private String name;
    /**
     * The function to evaluate.
     */
    private String function;
    /**
     * The unique DB id of the function, must be generated by the databass itself, use built in
     * fetching methods in the database to summon the function to avoid error.
     */
    private long id;

    /**
     * Creates a function object with no database id, useful for simple unstored calculations,
     * or initially storing the object.
     * @param name The name of the function.
     * @param function The functino to evaluate.
     */
    public Function(String name, String function){
        this.setName(name);
        this.setFunction(function);
        // id has not been set by database yet
        this.setId(-1);
    }

    /**
     * The full constructor for the function, use this whenever working with an existing object in
     * the database, or better yet the getFunction method in DBHandler.
     * @param name The unique name of the function.
     * @param function The function to evaluate
     * @param id The database id of the function.
     */
    public Function(String name, String function, long id){
        this.setName(name);
        this.setFunction(function);
        this.setId(id);
    }

    /**
     * Gives the uniques name of the function object.
     * @return The name of the function.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the function.
     * <div>
     *     <h3>Preconditions</h3>
     *     <ul>
     *         <li>The name must be unique, use appropriate isDuplicate method in the DBHandler
     *         Class to guarentee this.</li>
     *     </ul>
     * </div>
     * @param name The name of the function object.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gives the function associated with the object.
     * @return The function to evaluate.
     */
    public String getFunction() {
        return function;
    }

    /**
     * Sets the function of the object, make sure it is valid with various class methods before
     * storing.
     * @param function The mathematical function to evaluate.
     */
    public void setFunction(String function) {
        this.function = function;
    }

    /**
     * The unique database id of the function. Useful for updating the object in the SQLite
     * database.
     * @return The database identifier of the object.
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the database identifier of the object, should only be used in conjunction with methods
     * that provide the database id in DBHandler.
     * @param id The databae identifier of the object.
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Tests content equality of two function objects, ignores database id.
     * @param function The function to test equality to.
     * @return True for equal, false for not equal.
     */
    public boolean equals(Function function){
        boolean nameTest = this.name.compareTo(function.getName())==0;
        boolean functionTest = this.function.compareTo(function.getFunction())==0;
        return nameTest && functionTest;
    }
}
